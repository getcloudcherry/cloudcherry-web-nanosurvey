/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface CcInweb {
    /**
    * Show conditional thank you message based on the response works only for Yes/No question
    */
    'conditionalThankYou': {
      yes: string;
      no: string;
    };
    /**
    * Callbacks that will evaluate a condition for thank you text
    */
    'conditionalThankYouTextCallBack': any;
    /**
    * Use Custom key for managing throttling
    */
    'cookieId': any;
    /**
    * Opt out of sending response to server. Handle in event hooks
    */
    'doNotPost': boolean;
    /**
    * Question id for follow up response
    */
    'followUpQuestionId': string;
    /**
    * Dictionary of followUp options to be asked
    */
    'followUpQuestions': any;
    /**
    * Optionally hide the survey after submission
    */
    'hideAfterSubmission': boolean;
    /**
    * Use icons or text based options
    */
    'icons': "show" | "hide";
    'model': any;
    'position': "above" | "below";
    /**
    * prefills
    */
    'prefills': any;
    /**
    * Question text that will be shown to the user
    */
    'question': string;
    /**
    * Question-Id to post responses for
    */
    'questionId': string;
    /**
    * Set survey settings from a central location. This will be handy to use same token with multiple survey within a page.
    */
    'surveySettings': any;
    /**
    * Configure throttling duration
    */
    'throttleForDays': number;
    /**
    * token to submit responses
    */
    'token': string;
    'type': any;
    /**
    * Force the component to get token settings from server. It will use the first valid question to show.
    */
    'useToken': boolean;
  }
  interface CcMultiLine {
    'placeholder': string;
    /**
    * Question to ask the user for open text
    */
    'question': string;
  }
}

declare global {


  interface HTMLCcInwebElement extends Components.CcInweb, HTMLStencilElement {}
  var HTMLCcInwebElement: {
    prototype: HTMLCcInwebElement;
    new (): HTMLCcInwebElement;
  };

  interface HTMLCcMultiLineElement extends Components.CcMultiLine, HTMLStencilElement {}
  var HTMLCcMultiLineElement: {
    prototype: HTMLCcMultiLineElement;
    new (): HTMLCcMultiLineElement;
  };
  interface HTMLElementTagNameMap {
    'cc-inweb': HTMLCcInwebElement;
    'cc-multi-line': HTMLCcMultiLineElement;
  }
}

declare namespace LocalJSX {
  interface CcInweb {
    /**
    * Show conditional thank you message based on the response works only for Yes/No question
    */
    'conditionalThankYou'?: {
      yes: string;
      no: string;
    };
    /**
    * Callbacks that will evaluate a condition for thank you text
    */
    'conditionalThankYouTextCallBack'?: any;
    /**
    * Use Custom key for managing throttling
    */
    'cookieId'?: any;
    /**
    * Opt out of sending response to server. Handle in event hooks
    */
    'doNotPost'?: boolean;
    /**
    * Question id for follow up response
    */
    'followUpQuestionId'?: string;
    /**
    * Dictionary of followUp options to be asked
    */
    'followUpQuestions'?: any;
    /**
    * Optionally hide the survey after submission
    */
    'hideAfterSubmission'?: boolean;
    /**
    * Use icons or text based options
    */
    'icons'?: "show" | "hide";
    'model'?: any;
    'onCc-inweb-response'?: (event: CustomEvent<any>) => void;
    'position'?: "above" | "below";
    /**
    * prefills
    */
    'prefills'?: any;
    /**
    * Question text that will be shown to the user
    */
    'question'?: string;
    /**
    * Question-Id to post responses for
    */
    'questionId'?: string;
    /**
    * Set survey settings from a central location. This will be handy to use same token with multiple survey within a page.
    */
    'surveySettings'?: any;
    /**
    * Configure throttling duration
    */
    'throttleForDays'?: number;
    /**
    * token to submit responses
    */
    'token'?: string;
    'type'?: any;
    /**
    * Force the component to get token settings from server. It will use the first valid question to show.
    */
    'useToken'?: boolean;
  }
  interface CcMultiLine {
    'onMultilineAnswered'?: (event: CustomEvent<any>) => void;
    'placeholder'?: string;
    /**
    * Question to ask the user for open text
    */
    'question'?: string;
  }

  interface IntrinsicElements {
    'cc-inweb': CcInweb;
    'cc-multi-line': CcMultiLine;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'cc-inweb': LocalJSX.CcInweb & JSXBase.HTMLAttributes<HTMLCcInwebElement>;
      'cc-multi-line': LocalJSX.CcMultiLine & JSXBase.HTMLAttributes<HTMLCcMultiLineElement>;
    }
  }
}


